// Copyright (c) 2020 Google LLC All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.3.0'
    id 'org.jetbrains.grammarkit' version '2021.1.3'
    id 'org.jetbrains.kotlin.jvm' version '1.5.31'
    id 'com.palantir.git-version' version '0.12.3'
}

// import is optional to make task creation easier
import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jetbrains.grammarkit.tasks.GenerateParser

group 'com.google.idea'

version gitVersion()

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.5.31'
    testImplementation 'org.jetbrains.kotlin:kotlin-test:1.5.31'
    testImplementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7'
    testImplementation platform('org.junit:junit-bom:5.8.2')
    testRuntimeOnly ("org.junit.platform:junit-platform-launcher") {
        because("Only needed to run tests in a version of IntelliJ IDEA that bundles older versions")
    }
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
    testRuntimeOnly('org.junit.vintage:junit-vintage-engine')
}

grammarKit {
    grammarKitRelease = "2021.1.2"
}

task generateLexer(type: GenerateLexer) {
    // source flex file
    source = "src/grammar/gn.flex"

    // target directory for lexer
    targetDir = "src/gen/com/google/idea/gn"

    // target classname, target file will be targetDir/targetClass.java
    targetClass = "GnLexer"

    // if set, plugin will remove a lexer output file before generating new one. Default: false
    purgeOldFiles = true
}

task generateParser(type: GenerateParser) {
    // source bnf file
    source = "src/grammar/gn.bnf"

    // optional, task-specific root for the generated files. Default: none
    targetRoot = 'src/gen'

    // path to a parser file, relative to the targetRoot
    pathToParser = '/com/google/idea/gn/parser/GnParser.java'

    // path to a directory with generated psi files, relative to the targetRoot
    pathToPsiRoot = '/com/google/idea/gn/psi'

    // if set, plugin will remove a parser output file and psi output directory before generating new ones. Default: false
    purgeOldFiles = true
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    version.set('2021.3')
    sandboxDir.set('tmp/sandbox')
    plugins.set(['PsiViewer:213-SNAPSHOT'])
}

tasks.withType(compileKotlin.class) {
    dependsOn generateLexer, generateParser
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

sourceSets {
    main {
        java {
            srcDir 'src/gen'
        }
    }
}

test {
    useJUnitPlatform()
}

def intellijSinceBuild = '211.6693'
def intellijUntilBuild = '213.*'

patchPluginXml {
    sinceBuild.set(intellijSinceBuild)
    untilBuild.set(intellijUntilBuild)
    changeNotes.set("""
    <ul>
        <li>Compatibility with 213.* IDEs</li>
    </ul>
    """)
}

publishPlugin {
    token = System.getenv("ORG_GRADLE_PROJECT_intellijPublishToken")
}

// Helper build task to create a local updatePlugins.xml file to serve updates
// locally.
task serverPlugins() {
    dependsOn buildPlugin
    group "intellij"
    doLast {
        new File("$buildDir/distributions", "updatePlugins.xml").text = """<?xml version="1.0" encoding="UTF-8"?>
<plugins>
    <plugin id="com.google.idea.gn" url="http://localhost:8080/gn-${version}.zip" version="$version">
      <name>GN</name>
      <description>Experimental GN plugin for intellij</description>
    <idea-version since-build="$intellijSinceBuild" until-build="$intellijUntilBuild" />
  </plugin>
</plugins>
"""
    }
}
